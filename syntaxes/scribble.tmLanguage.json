{
    "scopeName": "source.scribble",
    "patterns": [
        {
            "include": "#annotation_type"
        },
        {
            "include": "#message"
        },
        {
            "include": "#construct"
        },
        {
            "include": "#operator"
        },
        {
            "include": "#constant"
        },
        {
            "include": "#number"
        },
        {
            "include": "#string"
        },
        {
            "include": "#type"
        },
        {
            "include": "#builtin"
        },
        {
            "include": "#function-call"
        },
        {
            "include": "#punctuation"
        }
    ],
    "repository": {
        "annotation_type": {
            "name": "meta.annotation.scribble",
            "match": "\\b(if_succeeds|if_updated|if_assigned|invariant|define)\\b",
            "captures": {
                "1": {
                    "name": "keyword.control.scribble"
                }
            }
        },
        "message": {
            "name": "meta.message.scribble",
            "match": "\\{(\\:msg) (\\\".*?\\\")\\}",
            "captures": {
                "1": {
                    "name": "keyword.other.scribble"
                },
                "2": {
                    "name": "string.quoted.double.scribble"
                }
            }
        },
        "construct": {
            "patterns": [
                {
                    "include": "#construct-old"
                },
                {
                    "include": "#construct-result"
                },
                {
                    "include": "#construct-let"
                },
                {
                    "include": "#construct-in"
                }
            ]
        },
        "construct-old": {
            "match": "\\b(old)\\s*\\(",
            "captures": {
                "1": {
                    "name": "keyword.other.scribble"
                }
            }
        },
        "construct-result": {
            "match": "(\\$result)\\b",
            "captures": {
                "1": {
                    "name": "keyword.other.scribble"
                }
            }
        },
        "construct-let": {
            "match": "\\b(let)\\b",
            "name": "keyword.control.scribble"
        },
        "construct-in": {
            "match": "\\b(in)\\b",
            "name": "keyword.control.scribble"
        },
        "operator": {
            "patterns": [
                {
                    "include": "#operator-logic"
                },
                {
                    "include": "#operator-arithmetic"
                },
                {
                    "include": "#operator-binary"
                },
                {
                    "include": "#operator-assignment"
                }
            ]
        },
        "operator-logic": {
            "match": "(==(?!>)|<(?!<)|<=|>(?!>)|>=|\\&\\&|\\|\\||\\:(?!=)|\\?|==>)",
            "name": "keyword.operator.logic.scribble"
        },
        "operator-arithmetic": {
            "match": "(\\+|\\-|\\/|\\*(?!\\*)|\\*\\*)",
            "name": "keyword.operator.arithmetic.scribble"
        },
        "operator-binary": {
            "match": "(\\^|\\&|\\||<<|>>)",
            "name": "keyword.operator.binary.scribble"
        },
        "operator-assignment": {
            "match": "(\\:?=)",
            "name": "keyword.operator.assignment.scribble"
        },
        "constant": {
            "patterns": [
                {
                    "include": "#constant-boolean"
                },
                {
                    "include": "#constant-time"
                },
                {
                    "include": "#constant-currency"
                }
            ]
        },
        "constant-boolean": {
            "match": "\\b(true|false)\\b",
            "name": "constant.language.boolean.scribble"
        },
        "constant-time": {
            "match": "\\b(seconds|minutes|hours|days|weeks|years)\\b",
            "name": "constant.language.time.scribble"
        },
        "constant-currency": {
            "match": "\\b(ether|wei|finney|szabo)\\b",
            "name": "constant.language.currency.scribble"
        },
        "number": {
            "patterns": [
                {
                    "include": "#number-decimal"
                },
                {
                    "include": "#number-hex"
                }
            ]
        },
        "number-decimal": {
            "match": "\\b(\\d+(\\.\\d+)?)\\b",
            "name": "constant.numeric.decimal.scribble"
        },
        "number-hex": {
            "match": "\\b(0[xX][a-fA-F0-9]+)\\b",
            "name": "constant.numeric.hexadecimal.scribble"
        },
        "string": {
            "patterns": [
                {
                    "match": "\\\".*?\\\"",
                    "name": "string.quoted.double.scribble"
                },
                {
                    "match": "\\'.*?\\'",
                    "name": "string.quoted.single.scribble"
                }
            ]
        },
        "type": {
            "match": "\\b(address|string\\d*|bytes\\d*|int\\d*|uint\\d*|bool|hash\\d*)\\b",
            "name": "support.type.primitive.scribble"
        },
        "builtin": {
            "patterns": [
                {
                    "include": "#variables-builtin"
                },
                {
                    "include": "#functions-builtin"
                }
            ]
        },
        "variables-builtin": {
            "patterns": [
                {
                    "match": "\\b(msg|block|tx|now)\\b",
                    "name": "variable.language.transaction.scribble"
                },
                {
                    "match": "\\b(this)\\b",
                    "name": "variable.language.this.scribble"
                },
                {
                    "match": "\\b(super)\\b",
                    "name": "variable.language.super.scribble"
                }
            ]
        },
        "functions-builtin": {
            "patterns": [
                {
                    "match": "\\b(addmod|mulmod|keccak256|sha256|sha3|ripemd160|ecrecover|unicode)\\b",
                    "name": "support.function.math.scribble"
                },
                {
                    "match": "\\b(blockhash|gasleft)\\b",
                    "name": "variable.language.transaction.scribble"
                }
            ]
        },
        "function-call": {
            "match": "\\b([A-Za-z_]\\w*)\\s*\\(",
            "captures": {
                "1": {
                    "name": "entity.name.function.scribble"
                }
            }
        },
        "punctuation": {
            "patterns": [
                {
                    "match": ";",
                    "name": "punctuation.terminator.scribble"
                },
                {
                    "match": "\\.",
                    "name": "punctuation.accessor.scribble"
                },
                {
                    "match": ",",
                    "name": "punctuation.separator.scribble"
                }
            ]
        }
    }
}
